# Declare the ARG before using it in the FROM line
ARG CI_BASE_VERSION="v0.27.4"

# https://github.com/zephyrproject-rtos/docker-image/tree/main
FROM ghcr.io/zephyrproject-rtos/ci-base:${CI_BASE_VERSION}

# Args from devcontainer.json (local build) or GitHub workflow (CI) (or default)
ARG TOOLCHAIN="arm-zephyr-eabi"
ARG ZSDK_VERSION="0.17.0"
ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll"
ARG ZEPHYR_SDK_DIR="/opt/toolchain"
ARG USERNAME="user"
ARG arch=amd64

ENV ZEPHYR_TOOLCHAIN_VARIANT=zephyr
ENV ZEPHYR_SDK_VERSION=${ZSDK_VERSION}
ENV ZEPHYR_SDK=${ZEPHYR_SDK_DIR}/zephyr-sdk-${ZSDK_VERSION}

# Install udev and git
RUN apt-get -y update && \
    apt-get -y install udev git
    
# Hack udev to run inside a container
# https://stackoverflow.com/questions/62060604/why-udev-init-script-default-disable-container-support-while-in-fact-it-works
RUN sed -i.bak -e '/if \[ ! -w \/sys \]/,+3 s/^/#/' /etc/init.d/udev

# Install the st-util GDB server
# https://manpages.ubuntu.com/manpages/focal/en/man1/st-util.1.html
RUN apt-get -y install stlink-tools

# install minimal Zephyr SDK
WORKDIR "${ZEPHYR_SDK_DIR}"
RUN wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZSDK_VERSION}/zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
    tar xf zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
    rm zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz

# install toolchain and host tools
# install OpenOCD udev rules
# https://docs.zephyrproject.org/latest/develop/toolchains/zephyr_sdk.html    
WORKDIR "${ZEPHYR_SDK}"
RUN ./setup.sh -t ${TOOLCHAIN} -h && \
    cp ./sysroots/x86_64-pokysdk-linux/usr/share/openocd/contrib/60-openocd.rules /lib/udev/rules.d/60-openocd.rules

# Nordic command line tools
# Releases: https://www.nordicsemi.com/Products/Development-tools/nrf-command-line-tools/download
RUN <<EOT
    NCLT_BASE=https://nsscprodmedia.blob.core.windows.net/prod/software-and-other-downloads/desktop-software/nrf-command-line-tools/sw/versions-10-x-x
    echo "Host architecture: $arch"
    case $arch in
        "amd64")
            NCLT_URL="${NCLT_BASE}/${NORDIC_COMMAND_LINE_TOOLS_VERSION}_linux-amd64.tar.gz"
            ;;
        "arm64")
            NCLT_URL="${NCLT_BASE}/${NORDIC_COMMAND_LINE_TOOLS_VERSION}_linux-arm64.tar.gz"
            ;;
    esac
    echo "NCLT_URL=${NCLT_URL}"
    if [ ! -z "$NCLT_URL" ]; then
        mkdir -p tmp && cd tmp
        wget -qO - "${NCLT_URL}" | tar --no-same-owner -xz
        # Install included JLink
        mkdir /opt/SEGGER
        tar xzf JLink_*.tgz -C /opt/SEGGER
        mv /opt/SEGGER/JLink* /opt/SEGGER/JLink
        # Install nrf-command-line-tools
        cp -r ./nrf-command-line-tools /opt
        ln -s /opt/nrf-command-line-tools/bin/nrfjprog /usr/local/bin/nrfjprog
        ln -s /opt/nrf-command-line-tools/bin/mergehex /usr/local/bin/mergehex
        cd .. && rm -rf tmp ;
    else
        echo "Skipping nRF Command Line Tools (not available for $arch)" ;
    fi
EOT

RUN wget ${WGET_ARGS} https://apt.llvm.org/llvm.sh && \
    chmod +x llvm.sh && \
    ./llvm.sh ${LLVM_VERSION} all && \
    rm -f llvm.sh

# Install sparse package for static analysis
RUN mkdir -p /opt/sparse && \
    cd /opt/sparse && \
    git clone https://git.kernel.org/pub/scm/devel/sparse/sparse.git && \
    cd sparse && git checkout ${SPARSE_VERSION} && \
    make -j8 && \
    PREFIX=/opt/sparse make install && \
    rm -rf /opt/sparse/sparse

# Run the Zephyr SDK setup script as 'user' in order to ensure that the
# `Zephyr-sdk` CMake package is located in the package registry under the
# user's home directory.
USER $USERNAME
WORKDIR /home/$USERNAME

RUN sudo -E -- bash -c ' \
    ${ZEPHYR_SDK}/setup.sh -c && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.cmake'

# Install minimal SVD files
# https://stackoverflow.com/a/52269934
RUN git clone -n --depth=1 --filter=tree:0 https://github.com/cmsis-svd/cmsis-svd-data.git && \
    cd cmsis-svd-data && \
    git sparse-checkout set --no-cone data/STMicro && \
    git checkout
ENV SVD_DIR=/home/${USERNAME}/cmsis-svd-data/data/STMicro


ENV XDG_CACHE_HOME=/home/${USERNAME}/.cache
# ENV ZEPHYR_BASE=/home/${USERNAME}/zephyr
# ENV PATH="${ZEPHYR_BASE}/scripts:${PATH}"
# add openocd to PATH
ENV PATH="${ZEPHYR_SDK}/sysroots/x86_64-pokysdk-linux/usr/bin:${PATH}"
# add toolchain to PATH
ENV PATH="${ZEPHYR_SDK}/${TOOLCHAIN}/bin:${PATH}"
ENV PATH="/opt/SEGGER/JLink:${PATH}"
WORKDIR /home/$USERNAME/workspace
